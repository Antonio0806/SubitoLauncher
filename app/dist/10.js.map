{"version":3,"sources":["webpack:///./app/components/InstanceCreatorModal/InstanceCreatorModal.scss","webpack:///./app/components/InstanceCreatorModal/InstanceCreatorModal.js","webpack:///./app/components/InstanceCreatorModal/containers/InstanceCreatorModal.js"],"names":["module","exports","FormItem","Form","Item","icon","size","type","htmlType","create","Component","constructor","props","super","handleSubmit","e","preventDefault","this","form","validateFields","async","err","values","promisify","fs","access","path","join","PACKS_PATH","packName","message","warning","error","version","createPack","setState","unMount","filter","inputValue","pathy","label","indexOf","forgeManifest","versionsManifest","state","versions","value","children","v","map","id","Object","keys","_","reverse","vSort","slice","ver","render","getFieldDecorator","Modal","history","title","style","height","width","layout","className","styles","container","onSubmit","margin","rules","required","pattern","RegExp","autoFocus","display","prefix","theme","color","placeholder","marginTop","options","showSearch","createInstance","connect","packCreator","modalState","dispatch","bindActionCreators","packCreatorActions","downloadManagerActions","InstanceCreatorModal"],"mappings":"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","file":"10.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_3lWymB6XVwAsCOf2zvc5-1\",\"createInstance\":\"_302OexRXDwP8T_jvtuMbcQ\"};","// @flow\nimport React, { Component } from 'react';\nimport { message, Form, Input, Icon, Button, Cascader } from 'antd';\nimport path from 'path';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport vSort from 'version-sort';\nimport _ from 'lodash';\nimport { PACKS_PATH } from '../../constants';\nimport styles from './InstanceCreatorModal.scss';\nimport Modal from '../Common/Modal/Modal';\n\ntype Props = {};\nconst FormItem = Form.Item;\n\nclass InstanceCreatorModal extends Component<Props> {\n  props: Props;\n\n  constructor(props) {\n    super(props);\n    const { forgeManifest, versionsManifest } = props;\n    this.state = {\n      unMount: false,\n      versions: [\n        {\n          value: 'vanilla',\n          label: 'Vanilla',\n          children: [\n            {\n              value: 'releases',\n              label: 'Releases',\n              children: versionsManifest\n                .filter(v => v.type === 'release')\n                .map(v => ({\n                  value: v.id,\n                  label: v.id\n                }))\n            },\n            {\n              value: 'snapshots',\n              label: 'Snapshots',\n              children: versionsManifest\n                .filter(v => v.type === 'snapshot')\n                .map(v => ({\n                  value: v.id,\n                  label: v.id\n                }))\n            }\n          ]\n        },\n        {\n          value: 'forge',\n          label: 'Forge',\n          // _.reverse mutates arrays so we make a copy of it first using .slice() and then we reverse it\n          children: Object.keys(forgeManifest).map(v => ({\n            value: v,\n            label: v,\n            // same as above\n            children: _.reverse(vSort(forgeManifest[v]).slice()).map(ver => ({\n              value: ver,\n              label: ver\n            }))\n          }))\n        }\n      ]\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        try {\n          await promisify(fs.access)(path.join(PACKS_PATH, values.packName));\n          message.warning('An instance with this name already exists.');\n        } catch (error) {\n          if (values.version[0] === 'vanilla') {\n            await this.props.createPack(values.version[2], values.packName);\n          } else if (values.version[0] === 'forge') {\n            await this.props.createPack(\n              values.version[1],\n              values.packName,\n              values.version[2]\n            );\n          }\n          this.setState({ unMount: true });\n        }\n      }\n    });\n  };\n\n  filter = (inputValue, pathy) => pathy[2].label.indexOf(inputValue) > -1;\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Modal\n        history={this.props.history}\n        unMount={this.state.unMount}\n        title=\"Create New Instance\"\n        style={{ height: 330, width: 540 }}\n      >\n        <Form\n          layout=\"inline\"\n          className={styles.container}\n          onSubmit={this.handleSubmit}\n        >\n          <div>\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('packName', {\n                rules: [\n                  {\n                    required: true,\n                    message:\n                      'Please input a valid name with just numbers and letters',\n                    pattern: new RegExp('^[a-zA-Z0-9_.-]+( [a-zA-Z0-9_.-]+)*$')\n                  }\n                ]\n              })(\n                <Input\n                  autoFocus\n                  size=\"large\"\n                  style={{\n                    width: 450,\n                    display: 'inline-block',\n                    height: '60px'\n                  }}\n                  prefix={\n                    <Icon\n                      type=\"play-circle\"\n                      theme=\"filled\"\n                      style={{ color: 'rgba(255,255,255,.8)' }}\n                    />\n                  }\n                  placeholder=\"Instance Name\"\n                />\n              )}\n            </FormItem>\n          </div>\n          <div style={{ marginTop: '20px' }}>\n            <FormItem>\n              {getFieldDecorator('version', {\n                rules: [{ required: true, message: 'Please select a version' }]\n              })(\n                <Cascader\n                  options={this.state.versions}\n                  size=\"large\"\n                  showSearch={{ filter: this.filter }}\n                  style={{ width: 335, display: 'inline-block' }}\n                  placeholder=\"Select a version\"\n                />\n              )}\n            </FormItem>\n          </div>\n          <div className={styles.createInstance}>\n            <Button icon=\"plus\" size=\"large\" type=\"primary\" htmlType=\"submit\">\n              Create Instance\n            </Button>\n          </div>\n        </Form>\n      </Modal>\n    );\n  }\n}\n\nexport default Form.create()(InstanceCreatorModal);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport InstanceCreatorModal from '../InstanceCreatorModal';\nimport * as packCreatorActions from '../../../actions/packCreator';\nimport * as downloadManagerActions from '../../../actions/downloadManager';\n\nfunction mapStateToProps(state) {\n  return {\n    versionsManifest: state.packCreator.versionsManifest,\n    forgeManifest: state.packCreator.forgeManifest,\n    modalState: state.packCreator.modalState\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    { ...packCreatorActions, ...downloadManagerActions },\n    dispatch\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InstanceCreatorModal);\n"],"sourceRoot":""}