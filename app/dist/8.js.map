{"version":3,"sources":["webpack:///./app/components/ExportPackModal/ContinueButton.js","webpack:///./app/components/ExportPackModal/FirstStep.js","webpack:///./app/components/ExportPackModal/BackButton.js","webpack:///./app/components/ExportPackModal/SecondStep.js","webpack:///./app/components/ExportPackModal/ThirdStep.js","webpack:///./app/components/ExportPackModal/ExportPackModal.js","webpack:///./app/components/ExportPackModal/ExportPackModal.scss"],"names":["props","filePath","className","styles","continueBtn","type","onClick","setActualStep","s","FirstStep","container","centeredDiv","showFileDialog","selectFolderBtn","path","basename","length","substr","ContinueButton","backBtn","SecondStep","treeData","setTreeData","useState","expandedKeys","setExpandedKeys","checkedKeys","setCheckedKeys","selectedKeys","setSelectedKeys","autoExpandParent","setAutoExpandParent","filesToDisable","join","PACKS_PATH","instanceName","useEffect","getTreeData","arr","dirTree","mapArr","children","undefined","map","child","title","name","key","selectedFiles","renderTreeNodes","data","item","TreeNode","disabled","find","f","dataRef","checkable","onExpand","LexpandedKeys","onCheck","LcheckedKeys","setSelectedFiles","onSelect","LselectedKeys","info","BackButton","connect","state","username","auth","displayName","isCompleted","setIsCompleted","workOnFiles","async","installedMods","JSON","parse","promisify","fs","readFile","mods","filteredFiles","filter","file","installedMod","fileName","zipFile","yazl","ZipFile","outputStream","pipe","createWriteStream","on","Promise","stat","isFile","addFile","relative","concurrency","manifest","createManifest","addBuffer","Buffer","from","end","config","projectID","getAddon","stringify","minecraft","version","modLoaders","id","forgeVersion","primary","manifestType","manifestVersion","modpackVersion","author","primaryAuthorName","files","mod","fileID","required","icon","faCheck","style","color","setUnMount","unMount","setFilePath","actualStep","Modal","history","height","width","remote","dialog","showOpenDialog","properties","paths","match","params","module","exports"],"mappings":"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","file":"8.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\nimport styles from './ExportPackModal.scss';\n\nexport default props => {\n  if (props.filePath === null) return null;\n  return (\n    <Button\n      className={styles.continueBtn}\n      type=\"primary\"\n      onClick={() => props.setActualStep(s => s + 1)}\n    >\n      Continue\n    </Button>\n  );\n};\n","import React from 'react';\nimport path from 'path';\nimport { Button, Checkbox } from 'antd';\nimport ContinueButton from './ContinueButton';\n\nimport styles from './ExportPackModal.scss';\n\nexport default function FirstStep(props) {\n  return (\n    <div className={styles.container}>\n      <div className={styles.centeredDiv}>\n        <div>\n          <h2>Where do you want to save the exported zip pack?</h2>\n          <Button\n            type=\"primary\"\n            onClick={props.showFileDialog}\n            className={styles.selectFolderBtn}\n          >\n            {props.filePath === null\n              ? 'Select Folder'\n              : path.basename(props.filePath).length >= 24\n              ? `${path.basename(props.filePath).substr(0, 24)}...`\n              : path.basename(props.filePath)}\n          </Button>\n        </div>\n      </div>\n      <ContinueButton\n        filePath={props.filePath}\n        setActualStep={props.setActualStep}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Button } from 'antd';\nimport styles from './ExportPackModal.scss';\n\nexport default props => {\n  return (\n    <Button\n      className={styles.backBtn}\n      type=\"primary\"\n      onClick={() => props.setActualStep(s => s - 1)}\n    >\n      Back\n    </Button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport dirTree from 'directory-tree';\nimport { Tree } from 'antd';\nimport path from 'path';\nimport { PACKS_PATH } from '../../constants';\nimport BackButton from './BackButton';\nimport ContinueButton from './ContinueButton';\nimport styles from './ExportPackModal.scss';\n\nexport default function SecondStep(props) {\n  const [treeData, setTreeData] = useState([]);\n  const [expandedKeys, setExpandedKeys] = useState([]);\n  const [checkedKeys, setCheckedKeys] = useState([]);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n\n  const filesToDisable = [\n    path.join(PACKS_PATH, props.instanceName, 'config.json'),\n    path.join(PACKS_PATH, props.instanceName, 'natives'),\n    path.join(PACKS_PATH, props.instanceName, 'thumbnail.png'),\n    path.join(PACKS_PATH, props.instanceName, 'usercache.json'),\n    path.join(PACKS_PATH, props.instanceName, 'usernamecache.json')\n  ];\n\n  useEffect(() => getTreeData(), []);\n\n  const getTreeData = () => {\n    const arr = dirTree(path.join(PACKS_PATH, props.instanceName));\n\n    const mapArr = children => {\n      if (children === undefined || children.length === 0) return [];\n      return children.map(child => ({\n        title: child.name,\n        key: child.path,\n        children: mapArr(child.children)\n      }));\n    };\n\n    setTreeData(mapArr(arr.children));\n    setCheckedKeys(props.selectedFiles);\n  };\n\n  const onExpand = LexpandedKeys => {\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    setExpandedKeys(LexpandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck = LcheckedKeys => {\n    setCheckedKeys(LcheckedKeys);\n    props.setSelectedFiles(LcheckedKeys);\n  };\n\n  const onSelect = (LselectedKeys, info) => {\n    setSelectedKeys(LselectedKeys);\n  };\n\n  const renderTreeNodes = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <Tree.TreeNode\n            disabled={filesToDisable.find(f => item.key === f)}\n            title={item.title}\n            key={item.key}\n            dataRef={item}\n          >\n            {renderTreeNodes(item.children)}\n          </Tree.TreeNode>\n        );\n      }\n      return <Tree.TreeNode {...item} />;\n    });\n\n  return (\n    <div className={styles.container}>\n      <h2>What files/folders would you like to export?</h2>\n      <Tree\n        checkable\n        onExpand={onExpand}\n        expandedKeys={expandedKeys}\n        autoExpandParent={autoExpandParent}\n        onCheck={onCheck}\n        checkedKeys={checkedKeys}\n        onSelect={onSelect}\n        selectedKeys={selectedKeys}\n      >\n        {renderTreeNodes(treeData)}\n      </Tree>\n      <ContinueButton\n        filePath={props.filePath}\n        setActualStep={props.setActualStep}\n      />\n      <BackButton setActualStep={props.setActualStep} />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport yazl from 'yazl';\nimport fs from 'fs';\nimport { Icon, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport path from 'path';\nimport axios from 'axios';\nimport { promisify } from 'util';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport Promise from 'bluebird';\nimport BackButton from './BackButton';\nimport styles from './ExportPackModal.scss';\nimport { PACKS_PATH } from '../../constants';\nimport { getAddon } from '../../utils/cursemeta';\n\nconst ThirdStep = props => {\n  const [isCompleted, setIsCompleted] = useState(false);\n  const { filePath, instanceName } = props;\n  useEffect(() => {\n    workOnFiles();\n  }, []);\n  const workOnFiles = async () => {\n    const installedMods = JSON.parse(\n      await promisify(fs.readFile)(\n        path.join(PACKS_PATH, instanceName, 'config.json')\n      )\n    ).mods;\n    const filteredFiles = props.selectedFiles.filter(\n      file =>\n        !installedMods.find(\n          installedMod => installedMod.fileName === path.basename(file)\n        )\n    );\n    const zipFile = new yazl.ZipFile();\n    zipFile.outputStream\n      .pipe(fs.createWriteStream(path.join(filePath, `${instanceName}.zip`)))\n      .on('close', () => {\n        setIsCompleted(true);\n      });\n\n    await Promise.map(\n      filteredFiles,\n      async file => {\n        const stats = await promisify(fs.stat)(file);\n        if (stats.isFile())\n          zipFile.addFile(\n            file,\n            path.join(\n              'overrides',\n              path.relative(path.join(PACKS_PATH, instanceName), file)\n            )\n          );\n      },\n      { concurrency: 30 }\n    );\n    const manifest = await createManifest();\n    zipFile.addBuffer(Buffer.from(manifest, 'utf8'), 'manifest.json');\n    zipFile.end();\n  };\n\n  const createManifest = async () => {\n    const config = JSON.parse(\n      await promisify(fs.readFile)(\n        path.join(PACKS_PATH, instanceName, 'config.json')\n      )\n    );\n    let data = null;\n\n    if (config.projectID) {\n      data = await getAddon(config.projectID);\n    }\n\n    return JSON.stringify({\n      minecraft: {\n        version: config.version,\n        modLoaders: [\n          {\n            id: config.forgeVersion,\n            primary: true\n          }\n        ]\n      },\n      manifestType: 'minecraftModpack',\n      manifestVersion: 1,\n      version: config.modpackVersion,\n      author: config.projectID ? data.primaryAuthorName : props.username,\n      projectID: config.projectID,\n      name: instanceName,\n      files: config.mods.map(mod => ({\n        projectID: mod.projectID,\n        fileID: mod.fileID,\n        required: true\n      }))\n    });\n  };\n  return (\n    <div className={styles.container}>\n      <div className={styles.centeredDiv}>\n        {isCompleted ? (\n          <div>\n            <h2>\n              All Done!{' '}\n              <FontAwesomeIcon icon={faCheck} style={{ color: '#27ae60' }} />\n            </h2>\n            <Button type=\"primary\" onClick={() => props.setUnMount(true)}>\n              Go Back To Instances\n            </Button>\n          </div>\n        ) : (\n          <h2>\n            We're doing some magical stuff <Icon type=\"loading\" />\n          </h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.auth.displayName\n  };\n}\n\nexport default connect(mapStateToProps)(ThirdStep);\n","import { Button } from 'antd';\nimport { remote } from 'electron';\nimport path from 'path';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Modal from '../Common/Modal/Modal';\nimport FirstStep from './FirstStep';\nimport SecondStep from './SecondStep';\nimport BackButton from './BackButton';\nimport ContinueButton from './ContinueButton';\nimport styles from './ExportPackModal.scss';\nimport ThirdStep from './ThirdStep';\n\ntype Props = {};\n\nconst ExportPack = props => {\n  const [unMount, setUnMount] = useState(false);\n  // const [loading, setLoading] = useState(false);\n  const [filePath, setFilePath] = useState(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [actualStep, setActualStep] = useState(0);\n  // const [packType, setPackType] = useState('Twitch');\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   form.validateFields(async (err, values) => {\n  //     if (!err) {\n  //       if (filePath === null) {\n  //         message.warning('Please select a zip file.');\n  //       }\n\n  //       try {\n  //         await promisify(fs.access)(path.join(PACKS_PATH, values.packName));\n  //         message.warning('An instance with this name already exists.');\n  //       } catch (error) {\n  //         setLoading(true);\n  //         await props.importTwitchProfile(values.packName, filePath);\n  //         setUnMount(true);\n  //       }\n  //     }\n  //   });\n  // };\n\n  const showFileDialog = () => {\n    remote.dialog.showOpenDialog(\n      {\n        properties: ['openDirectory']\n      },\n      paths => {\n        setFilePath(paths[0]);\n      }\n    );\n  };\n\n  return (\n    <Modal\n      history={props.history}\n      unMount={unMount}\n      title=\"Export Pack\"\n      style={{ height: 400, width: 540 }}\n    >\n      {actualStep === 0 && (\n        <FirstStep\n          filePath={filePath}\n          showFileDialog={showFileDialog}\n          setActualStep={setActualStep}\n        />\n      )}\n      {actualStep === 1 && (\n        <SecondStep\n          filePath={filePath}\n          setActualStep={setActualStep}\n          instanceName={props.match.params.instanceName}\n          setSelectedFiles={setSelectedFiles}\n          selectedFiles={selectedFiles}\n        />\n      )}\n      {actualStep === 2 && (\n        <ThirdStep\n          filePath={filePath}\n          setActualStep={setActualStep}\n          instanceName={props.match.params.instanceName}\n          selectedFiles={selectedFiles}\n          setUnMount={setUnMount}\n        />\n      )}\n    </Modal>\n  );\n};\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ExportPack);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AbVj4G0PFA0DkABkjzejA\",\"selectFolderBtn\":\"_1m7uuBK74dCOTIP7kk8Ozb\",\"continueBtn\":\"_2h_mtSe7SxzaU3ctvXlchq\",\"backBtn\":\"_16yAFysm0Ru3Gkh5Co4oEh\",\"centeredDiv\":\"_2-wUwwk7QbPWsvEFDCshqp\"};"],"sourceRoot":""}